// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lecture_7_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Lecture7DemoClient is the client API for Lecture7Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Lecture7DemoClient interface {
	AddV1(ctx context.Context, in *AddRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CallbackFirstV1(ctx context.Context, in *CallbackFirstV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CallbackSecondV1(ctx context.Context, in *CallbackSecondV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StatusV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponseV1, error)
}

type lecture7DemoClient struct {
	cc grpc.ClientConnInterface
}

func NewLecture7DemoClient(cc grpc.ClientConnInterface) Lecture7DemoClient {
	return &lecture7DemoClient{cc}
}

func (c *lecture7DemoClient) AddV1(ctx context.Context, in *AddRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/siriusfreak.lecture_7_demo.Lecture7Demo/AddV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecture7DemoClient) CallbackFirstV1(ctx context.Context, in *CallbackFirstV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/siriusfreak.lecture_7_demo.Lecture7Demo/CallbackFirstV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecture7DemoClient) CallbackSecondV1(ctx context.Context, in *CallbackSecondV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/siriusfreak.lecture_7_demo.Lecture7Demo/CallbackSecondV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecture7DemoClient) StatusV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponseV1, error) {
	out := new(StatusResponseV1)
	err := c.cc.Invoke(ctx, "/siriusfreak.lecture_7_demo.Lecture7Demo/StatusV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Lecture7DemoServer is the server API for Lecture7Demo service.
// All implementations must embed UnimplementedLecture7DemoServer
// for forward compatibility
type Lecture7DemoServer interface {
	AddV1(context.Context, *AddRequestV1) (*emptypb.Empty, error)
	CallbackFirstV1(context.Context, *CallbackFirstV1Request) (*emptypb.Empty, error)
	CallbackSecondV1(context.Context, *CallbackSecondV1Request) (*emptypb.Empty, error)
	StatusV1(context.Context, *emptypb.Empty) (*StatusResponseV1, error)
	mustEmbedUnimplementedLecture7DemoServer()
}

// UnimplementedLecture7DemoServer must be embedded to have forward compatible implementations.
type UnimplementedLecture7DemoServer struct {
}

func (UnimplementedLecture7DemoServer) AddV1(context.Context, *AddRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddV1 not implemented")
}
func (UnimplementedLecture7DemoServer) CallbackFirstV1(context.Context, *CallbackFirstV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallbackFirstV1 not implemented")
}
func (UnimplementedLecture7DemoServer) CallbackSecondV1(context.Context, *CallbackSecondV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallbackSecondV1 not implemented")
}
func (UnimplementedLecture7DemoServer) StatusV1(context.Context, *emptypb.Empty) (*StatusResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusV1 not implemented")
}
func (UnimplementedLecture7DemoServer) mustEmbedUnimplementedLecture7DemoServer() {}

// UnsafeLecture7DemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Lecture7DemoServer will
// result in compilation errors.
type UnsafeLecture7DemoServer interface {
	mustEmbedUnimplementedLecture7DemoServer()
}

func RegisterLecture7DemoServer(s grpc.ServiceRegistrar, srv Lecture7DemoServer) {
	s.RegisterService(&Lecture7Demo_ServiceDesc, srv)
}

func _Lecture7Demo_AddV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lecture7DemoServer).AddV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/siriusfreak.lecture_7_demo.Lecture7Demo/AddV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lecture7DemoServer).AddV1(ctx, req.(*AddRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lecture7Demo_CallbackFirstV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackFirstV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lecture7DemoServer).CallbackFirstV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/siriusfreak.lecture_7_demo.Lecture7Demo/CallbackFirstV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lecture7DemoServer).CallbackFirstV1(ctx, req.(*CallbackFirstV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lecture7Demo_CallbackSecondV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackSecondV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lecture7DemoServer).CallbackSecondV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/siriusfreak.lecture_7_demo.Lecture7Demo/CallbackSecondV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lecture7DemoServer).CallbackSecondV1(ctx, req.(*CallbackSecondV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lecture7Demo_StatusV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lecture7DemoServer).StatusV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/siriusfreak.lecture_7_demo.Lecture7Demo/StatusV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lecture7DemoServer).StatusV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Lecture7Demo_ServiceDesc is the grpc.ServiceDesc for Lecture7Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lecture7Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "siriusfreak.lecture_7_demo.Lecture7Demo",
	HandlerType: (*Lecture7DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddV1",
			Handler:    _Lecture7Demo_AddV1_Handler,
		},
		{
			MethodName: "CallbackFirstV1",
			Handler:    _Lecture7Demo_CallbackFirstV1_Handler,
		},
		{
			MethodName: "CallbackSecondV1",
			Handler:    _Lecture7Demo_CallbackSecondV1_Handler,
		},
		{
			MethodName: "StatusV1",
			Handler:    _Lecture7Demo_StatusV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lecture-7-demo/lecture-7-demo.proto",
}
